{"version":3,"sources":["components/MidiPort.js","components/ReadExcel.js","components/ExportExcel.js","components/Window.js","components/HelpButton.js","App.js","index.js"],"names":["MidiPorts","props","WebMidi","enable","err","alert","inputPort","inputs","outputPort","outputs","setInput","setOutput","className","onChange","e","console","log","map","port","name","id","ExcelReader","type","file","fileReader","FileReader","readAsArrayBuffer","onload","bufferArray","target","result","worksheet","XLSX","Sheets","data","sheet_to_json","header","group","table","sheetObj","MAX","length","i","push","index","sysex","expected","expectedLength","response","responseLength","passFail","setItems","setHelp","help","readExcel","files","ExportExcel","newWorkBook","book_new","resultsSheet","json_to_sheet","book_append_sheet","onClick","Window","href","HelpButton","App","useState","items","input","output","viewHelp","setViewHelp","clickHandler","parseInt","value","filter","cell","join","split","splice","message","el","Number","send","addListener","reply","item","indexOf","byteComparison","updateData","toString","toUpperCase","decimalToHex","receiveSysex","MidiPort","match","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c88a9921.chunk.js","sourcesContent":["import React from 'react';\nimport WebMidi from 'webmidi';\nimport '../App.css';\nconst MidiPorts = props => {\n    WebMidi.enable(function (err) {\n        // If midi ports aren't found, log error\n        if (err) alert('WebMidi could not be enabled.', err);\n        // Otherwise log available midi ports\n\n        let inputPort = WebMidi.inputs[0];\n        let outputPort = WebMidi.outputs[0];\n        props.setInput(inputPort);\n        props.setOutput(outputPort);\n    }, true);\n    return (\n        <div className='midi-ports'>\n            <span>Input Port: </span>\n            <select className='ports' onChange={e => console.log(e)}>\n                {WebMidi.inputs.map(port => (\n                    <option key={port.id}>{port.name}</option>\n                ))}\n            </select>\n\n            <span className='output'>Output Port: </span>\n            <select className='ports'>\n                {WebMidi.outputs.map(port => (\n                    <option key={port.id}>{port.name}</option>\n                ))}\n            </select>\n        </div>\n    );\n};\n\nexport default MidiPorts;\n","import React from 'react';\nimport * as XLSX from 'xlsx';\nimport '../App.css';\n\nfunction ExcelReader(props) {\n    function readExcel(file) {\n        const fileReader = new FileReader();\n        fileReader.readAsArrayBuffer(file);\n        fileReader.onload = e => {\n            // Set variables\n            // const sheetName = prompt('Please enter the name of the sheet');\n            const sheetName = 'SysEx';\n            const bufferArray = e.target.result;\n            const wb = XLSX.read(bufferArray, { type: 'buffer' });\n\n            const worksheet = wb.Sheets[sheetName];\n            console.log('worksheet', worksheet);\n            const data = XLSX.utils.sheet_to_json(worksheet, { header: 1 });\n            console.group();\n            console.table('data', data);\n\n            let sheetObj = [];\n            const MAX = data.length;\n            let start = 3; // Start of the actual data\n\n            for (let i = start; i < MAX; i++) {\n                sheetObj.push({\n                    index: i,\n                    name: data[i][0],\n                    port: data[i][1],\n                    sysex: data[i][2],\n                    expected: data[i][3],\n                    expectedLength: null,\n                    response: '',\n                    responseLength: null,\n                    passFail: null,\n                });\n            }\n            props.setItems(sheetObj);\n            console.log('Worksheet load successful');\n            props.setHelp(!props.help);\n        };\n    }\n\n    return (\n        <label className='button'>\n            Import Sheet\n            <input\n                type='file'\n                className='file'\n                onChange={e => {\n                    const file = e.target.files[0];\n                    readExcel(file);\n                }}\n            />\n        </label>\n    );\n}\n\nexport default ExcelReader;\n","import React from 'react';\nimport * as XLSX from 'xlsx';\nimport '../App.css';\n\nfunction ExportExcel(props) {\n    // This is the 'items' state, the full data object\n    let newWorkBook = XLSX.utils.book_new(); // create new workbook\n    let resultsSheet = XLSX.utils.json_to_sheet(props.data); //can also use XLSX.utils.sheet_add_json to add to existing\n    XLSX.utils.book_append_sheet(newWorkBook, resultsSheet, 'Sysex Results'); // Add new worksheet to new workbook\n\n    // https://www.youtube.com/watch?v=tKz_ryychBY&list=PLQ9Y_YUSECCg0uiQR-Uj8E2a8fxTelcNB&index=3&t=1197s\n    return (\n        <div>\n            {/* skipHeader: false if we want to remove the header */}\n            <button className='button' onClick={() => XLSX.writeFile(newWorkBook, 'sysex-results.xlsx')}>\n                Export to New Sheet\n            </button>\n        </div>\n    );\n}\n\nexport default ExportExcel;\n","import React from 'react';\n\nfunction Window() {\n    // This will show when the page is loaded.  once a file is imported, it can be accessed via the help button\n    return (\n        <div className='window'>\n            <section className='window__header'>\n                <h4>Welcome to Sysex Tester 9</h4>\n                <p>\n                    Sysex T9 will import your excel sheets and parse the cells for sysex data, where you will be able to send the messages to your\n                    MIDI device while monitoring the response.\n                </p>\n                ________________\n            </section>\n            <section className='window__content'>\n                <p> To use Sysex T9: </p>\n                <p>\n                    {' '}\n                    1. Create an excel sheet based on{' '}\n                    <a href='.' target='_blank'>\n                        this template\n                    </a>\n                </p>\n                <p>\n                    2. Click the Import Sheet button. NOTE: This menu will disappear once a sheet is imported. Access this window again by clicking\n                    [help]{' '}\n                </p>\n                <p>3. Make sure your Input and Output Ports are set to the proper MIDI Device </p>\n                <p> 4. Click Send to send each Sysex message. If the message is successful, the response will be written to the Response cell. </p>\n                <p>\n                    5. Along with the Sysex response message, the amount of bytes sent and received will be written and compared. <br />\n                    If the number of bytes of the response matches the expected number of bytes, the message will be colored green. If the incorrect\n                    amount of bytes are received, the message will be colored red.\n                </p>\n                <p>6. Once finished, [Export to New Sheet] and save the results to your system</p>\n                ________________\n            </section>\n            <section className='window__footer'>\n                <p />\n                If you want to see more data while operating Sysex T9:\n                <p />\n                1. Open up the console on your browser by right clicking anywhere and clicking [Inspect].\n                <p />\n                2. Click on the [Console] tab to get readouts of the data being sent and received.\n                <p />\n                If you want to access this menu again, press the [help] button at any time.\n                <p />\n            </section>\n        </div>\n    );\n}\n\nexport default Window;\n","import { React, useState } from 'react';\nimport Window from './Window';\n\nfunction HelpButton({ help, setHelp }) {\n    return (\n        <div>\n            <button className='button' onClick={() => setHelp(!help)}>\n                help\n            </button>\n        </div>\n    );\n}\n\nexport default HelpButton;\n","import React, { useState } from 'react';\nimport MidiPorts from './components/MidiPort';\nimport ExcelReader from './components/ReadExcel';\nimport Collection from './components/Collection';\nimport ExportExcel from './components/ExportExcel';\nimport HelpButton from './components/HelpButton';\nimport Window from './components/Window';\nimport './Header.css';\nimport './App.css';\n\nfunction App() {\n    const [items, setItems] = useState([]);\n    const [input, setInput] = useState();\n    const [output, setOutput] = useState();\n    const [collection, setCollection] = useState([]);\n    const [viewHelp, setViewHelp] = useState(true);\n\n    function addToCollection(e) {\n        const value = e.target.value;\n        const match = items.filter(item => item.sysex.includes(value));\n        setCollection([...collection, match[0]]);\n    }\n\n    function clickHandler(e) {\n        // console.log(e.target.id);\n        console.log(e);\n        const target = parseInt(e.target.id);\n        // TODO: I should be able to just filter based on the target value and not worry about IDs or changing the function to fit the Collection input\n        // Finds cell sysex message based on the target ID, which matches the index\n        const value = items\n            .filter(cell => cell.index === target)\n            .map(cell => cell.sysex)\n            .join(' ') // converts it into string\n            .split(' '); // converts it into array, but seperated by byte\n        value.splice(0, 1); // Removes statusbyte, as that is handled by output.send\n\n        // converts bytes into integer that's readable by computer,\n        const message = value.map(el => {\n            el = '0x' + el;\n            return parseInt(Number(el, 10));\n        });\n        console.log('sent: (RAW)', message);\n        // Send the sysex\n\n        if (output) {\n            output.send(0xf0, message);\n            receiveSysex(target);\n        } else {\n            alert('No MIDI output port selected');\n        }\n    }\n\n    function receiveSysex(target) {\n        input.addListener('sysex', 'all', function (e) {\n            const reply = [...e.data];\n            console.log('received (RAW):', reply);\n            console.log('response length is', reply.length);\n            // compare length function goes here\n\n            updateData(target, decimalToHex(reply));\n        });\n    }\n\n    function decimalToHex(reply) {\n        const converter = reply.map(el => {\n            el = el.toString(16) + ' ';\n            if (el.length === 2) el = '0' + el;\n            return el.toUpperCase();\n        });\n        return converter;\n    }\n\n    function byteComparison(message) {\n        return message.length;\n    }\n\n    // const resultTest = response => {\n    //     console.log('RESPONSE TEST :');\n    //     console.log(response.length);\n    // };\n\n    // Adds response to the items state\n    function updateData(target, response) {\n        const result = items.map(item => {\n            if (item.index === target) {\n                // So that the response isn't appended into the cell every time it's retested\n                if (item.response.indexOf('F0') === -1) {\n                    item.response += response;\n                }\n                //TODO: this function is doing multiple things not described by it's name.  consider breaking up\n                // Sets expected length\n                if (!item.expectedLength) {\n                    item.expectedLength += item.expected.split(' ').length;\n                }\n\n                if (!item.responseLength) {\n                    item.responseLength += byteComparison(response);\n                }\n\n                if (item.responseLength === item.expectedLength) {\n                    item.passFail = 'pass';\n                    console.table(item);\n                }\n            }\n            return item;\n        });\n\n        console.log('sysex response: ' + response.join(''));\n        setItems(result);\n    }\n\n    return (\n        <div className='container'>\n            <p className='title'>Sysex T9</p>\n            <div className='utilities'>\n                <ExcelReader setItems={setItems} setHelp={setViewHelp} help={viewHelp} />\n                {/* <ExportExcel data={items} /> */}\n                <MidiPorts setInput={setInput} setOutput={setOutput} input={input} output={output} />\n                <ExportExcel data={items} />\n                <HelpButton help={viewHelp} setHelp={setViewHelp} />\n            </div>\n            {viewHelp ? <Window /> : ''}\n            <div className='main-container'>\n                <table className='table-container'>\n                    <thead>\n                        <tr className={items.length > 2 ? 'table-header' : 'invisible'}>\n                            {/*TODO: make these propereties that show up only once loaded */}\n                            <th className='header__item'>Name</th>\n                            <th>Port</th>\n                            <th>Sysex Message</th>\n                            <th>Expected</th>\n                            <th>Response</th>\n                            {/* <th>Pass/Fail</th> */}\n                            {/* <th>Notes</th> */}\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {items.map(data => (\n                            <tr key={data.index} className='table_row'>\n                                <td className='msg_name'>{data.name}</td>\n                                <td className='port'>{data.port}</td>\n                                {/* Sysex Column */}\n                                <td className='sysex-container'>\n                                    <div className='sysex-cell'>\n                                        {data.sysex}\n                                        <button className='send-button' id={data.index} value={data.sysex} onClick={clickHandler}>\n                                            send{' '}\n                                        </button>\n                                        {/*  Collection Button\n                                        <button onClick={addToCollection} value={data.sysex}>\n                                            Add\n                                        </button> */}\n                                    </div>\n                                </td>\n\n                                {/* Expected */}\n                                <td className='response'>\n                                    {data.expected} {data.expectedLength}\n                                </td>\n                                {/*the regex is to eliminate the commas */}\n                                <td className='response'>{data.response.match(/[^,*]/gm)}</td>\n                                <br />\n                                <div className={data.passFail === 'pass' ? 'pass' : 'fail'}>\n                                    {data.responseLength ? `Response: ${data.responseLength} bytes` : ''}\n                                </div>\n                                {/* <td>\n                                    <input type='textarea' wrap='hard' className='notes'></input>\n                                </td> */}\n                            </tr>\n                        ))}\n                    </tbody>\n                </table>\n                {/* <Collection collection={collection} setCollection={setCollection} fn={addToCollection} sendSys={clickHandler} /> */}\n            </div>\n            <footer>© Copyright 2021 John DeTora. All rights reserved.</footer>\n        </div>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}